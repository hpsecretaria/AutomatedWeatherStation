// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "AutomatedWeatherStation\App.config"
//     Connection String Name: "AWSContext"
//     Connection String:      "Data Source=(local);Initial Catalog=AWS;Integrated Security=True;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.ModelConfiguration;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace AutomatedWeatherStation.DataAccess.EF
{

    #region Unit of work

    public interface IAWSContext : IDisposable
    {
        DbSet<Measurement> Measurements { get; set; } // Measurement
        DbSet<Sensor> Sensors { get; set; } // Sensor
        DbSet<Station> Stations { get; set; } // Station
        DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        DbSet<User> Users { get; set; } // User

        int SaveChanges();
        Task<int> SaveChangesAsync();
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
    }

    #endregion

    #region Database context

    [GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AWSContext : DbContext, IAWSContext
    {
        static AWSContext()
        {
            Database.SetInitializer<AWSContext>(null);
        }

        public AWSContext()
            : base("Name=AWSContext")
        {
        }

        public AWSContext(string connectionString)
            : base(connectionString)
        {
        }

        public AWSContext(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public AWSContext(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public AWSContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        public DbSet<Measurement> Measurements { get; set; } // Measurement
        public DbSet<Sensor> Sensors { get; set; } // Sensor
        public DbSet<Station> Stations { get; set; } // Station
        public DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        public DbSet<User> Users { get; set; } // User

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return sqlValue == null || sqlValue == DBNull.Value;
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new MeasurementConfiguration());
            modelBuilder.Configurations.Add(new SensorConfiguration());
            modelBuilder.Configurations.Add(new StationConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new MeasurementConfiguration(schema));
            modelBuilder.Configurations.Add(new SensorConfiguration(schema));
            modelBuilder.Configurations.Add(new StationConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            return modelBuilder;
        }
    }

    #endregion

    #region POCO classes

    // Measurement
    [GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Measurement
    {
        public int MeasurementId { get; set; } // MeasurementID (Primary key)
        public int? StationId { get; set; } // StationID
        public DateTime Date { get; set; } // Date
        public decimal? Temperature { get; set; } // Temperature
        public decimal? Humidity { get; set; } // Humidity
        public decimal? Pressure { get; set; } // Pressure
        public decimal? Rainfall24H { get; set; } // Rainfall24H
        public decimal? Rainfall15M { get; set; } // Rainfall15M
        public decimal? WindDirection { get; set; } // WindDirection
        public decimal? WindSpeed { get; set; } // WindSpeed
        public decimal? SolarIrradianceM { get; set; } // SolarIrradianceM
        public decimal? SolarIrradianceH { get; set; } // SolarIrradianceH
        public decimal? SignalLevel { get; set; } // SignalLevel
        public decimal? Battery { get; set; } // Battery

        // Foreign keys
        public virtual Station Station { get; set; } // FK_Measurement_Station
    }

    // Sensor
    [GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sensor
    {
        public int SensorId { get; set; } // SensorID (Primary key)
        public string SensorName { get; set; } // SensorName (length: 50)
        public int? StationId { get; set; } // StationID

        // Foreign keys
        public virtual Station Station { get; set; } // FK_Sensor_Sensor
    }

    // Station
    [GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Station
    {
        public Station()
        {
            Measurements = new List<Measurement>();
            Sensors = new List<Sensor>();
        }

        public int StationId { get; set; } // StationID (Primary key)
        public string Location { get; set; } // Location (length: 150)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 50)
        public string Imei { get; set; } // IMEI (length: 50)
        public decimal? Latitude { get; set; } // Latitude
        public decimal? Longitude { get; set; } // Longitude
        public string Keyword { get; set; } // Keyword (length: 10)
        public string DisplayLocation { get; set; } // DisplayLocation (length: 50)
        public string DisplayLocationArea { get; set; } // DisplayLocationArea (length: 50)

        // Reverse navigation
        public virtual ICollection<Measurement> Measurements { get; set; } // Measurement.FK_Measurement_Station
        public virtual ICollection<Sensor> Sensors { get; set; } // Sensor.FK_Sensor_Sensor
    }

    // sysdiagrams
    [GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sysdiagram
    {
        public string Name { get; set; } // name (length: 128)
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
    }

    // User
    [GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class User
    {
        public string Name { get; set; } // Name (length: 30)
        public string Password { get; set; } // Password (length: 30)
        public int Rights { get; set; } // Rights
    }

    #endregion

    #region POCO Configuration

    // Measurement
    [GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class MeasurementConfiguration : EntityTypeConfiguration<Measurement>
    {
        public MeasurementConfiguration()
            : this("dbo")
        {
        }

        public MeasurementConfiguration(string schema)
        {
            ToTable("Measurement", schema);
            HasKey(x => x.MeasurementId);

            Property(x => x.MeasurementId)
                .HasColumnName(@"MeasurementID")
                .IsRequired()
                .HasColumnType("int")
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.StationId).HasColumnName(@"StationID").IsOptional().HasColumnType("int");
            Property(x => x.Date).HasColumnName(@"Date").IsRequired().HasColumnType("datetime2");
            Property(x => x.Temperature)
                .HasColumnName(@"Temperature")
                .IsOptional()
                .HasColumnType("decimal")
                .HasPrecision(18, 2);
            Property(x => x.Humidity)
                .HasColumnName(@"Humidity")
                .IsOptional()
                .HasColumnType("decimal")
                .HasPrecision(18, 2);
            Property(x => x.Pressure)
                .HasColumnName(@"Pressure")
                .IsOptional()
                .HasColumnType("decimal")
                .HasPrecision(18, 2);
            Property(x => x.Rainfall24H)
                .HasColumnName(@"Rainfall24H")
                .IsOptional()
                .HasColumnType("decimal")
                .HasPrecision(18, 2);
            Property(x => x.Rainfall15M)
                .HasColumnName(@"Rainfall15M")
                .IsOptional()
                .HasColumnType("decimal")
                .HasPrecision(18, 2);
            Property(x => x.WindDirection)
                .HasColumnName(@"WindDirection")
                .IsOptional()
                .HasColumnType("decimal")
                .HasPrecision(18, 2);
            Property(x => x.WindSpeed)
                .HasColumnName(@"WindSpeed")
                .IsOptional()
                .HasColumnType("decimal")
                .HasPrecision(18, 2);
            Property(x => x.SolarIrradianceM)
                .HasColumnName(@"SolarIrradianceM")
                .IsOptional()
                .HasColumnType("decimal")
                .HasPrecision(18, 2);
            Property(x => x.SolarIrradianceH)
                .HasColumnName(@"SolarIrradianceH")
                .IsOptional()
                .HasColumnType("decimal")
                .HasPrecision(18, 2);
            Property(x => x.SignalLevel)
                .HasColumnName(@"SignalLevel")
                .IsOptional()
                .HasColumnType("decimal")
                .HasPrecision(18, 2);
            Property(x => x.Battery).HasColumnName(@"Battery").IsOptional().HasColumnType("decimal").HasPrecision(18, 2);

            // Foreign keys
            HasOptional(a => a.Station)
                .WithMany(b => b.Measurements)
                .HasForeignKey(c => c.StationId)
                .WillCascadeOnDelete(false); // FK_Measurement_Station
        }
    }

    // Sensor
    [GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SensorConfiguration : EntityTypeConfiguration<Sensor>
    {
        public SensorConfiguration()
            : this("dbo")
        {
        }

        public SensorConfiguration(string schema)
        {
            ToTable("Sensor", schema);
            HasKey(x => x.SensorId);

            Property(x => x.SensorId)
                .HasColumnName(@"SensorID")
                .IsRequired()
                .HasColumnType("int")
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.SensorName)
                .HasColumnName(@"SensorName")
                .IsOptional()
                .HasColumnType("nvarchar")
                .HasMaxLength(50);
            Property(x => x.StationId).HasColumnName(@"StationID").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Station)
                .WithMany(b => b.Sensors)
                .HasForeignKey(c => c.StationId)
                .WillCascadeOnDelete(false); // FK_Sensor_Sensor
        }
    }

    // Station
    [GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class StationConfiguration : EntityTypeConfiguration<Station>
    {
        public StationConfiguration()
            : this("dbo")
        {
        }

        public StationConfiguration(string schema)
        {
            ToTable("Station", schema);
            HasKey(x => x.StationId);

            Property(x => x.StationId)
                .HasColumnName(@"StationID")
                .IsRequired()
                .HasColumnType("int")
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Location)
                .HasColumnName(@"Location")
                .IsRequired()
                .HasColumnType("nvarchar")
                .HasMaxLength(150);
            Property(x => x.PhoneNumber)
                .HasColumnName(@"PhoneNumber")
                .IsOptional()
                .HasColumnType("nvarchar")
                .HasMaxLength(50);
            Property(x => x.Imei).HasColumnName(@"IMEI").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Latitude)
                .HasColumnName(@"Latitude")
                .IsOptional()
                .HasColumnType("decimal")
                .HasPrecision(18, 10);
            Property(x => x.Longitude)
                .HasColumnName(@"Longitude")
                .IsOptional()
                .HasColumnType("decimal")
                .HasPrecision(18, 10);
            Property(x => x.Keyword).HasColumnName(@"Keyword").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.DisplayLocation)
                .HasColumnName(@"DisplayLocation")
                .IsOptional()
                .HasColumnType("nvarchar")
                .HasMaxLength(50);
            Property(x => x.DisplayLocationArea)
                .HasColumnName(@"DisplayLocationArea")
                .IsOptional()
                .HasColumnType("nvarchar")
                .HasMaxLength(50);
        }
    }

    // sysdiagrams
    [GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SysdiagramConfiguration : EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }

        public SysdiagramConfiguration(string schema)
        {
            ToTable("sysdiagrams", schema);
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName(@"principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId)
                .HasColumnName(@"diagram_id")
                .IsRequired()
                .HasColumnType("int")
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName(@"definition").IsOptional().HasColumnType("varbinary");
        }
    }

    // User
    [GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class UserConfiguration : EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("User", schema);
            HasKey(x => new {x.Name, x.Password, x.Rights});

            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Password).HasColumnName(@"Password").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.Rights).HasColumnName(@"Rights").IsRequired().HasColumnType("int");
        }
    }

    #endregion
}

// </auto-generated>